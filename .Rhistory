theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 10),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 12),
plot.margin = margin(1, 1, 1, 2, "cm")  # Adjust margin for labels
)
}
# Create bar charts for each category
bar_epigenomics <- create_horizontal_bar_chart(data_epigenomics, "Epigenomics")
bar_transcriptomics <- create_horizontal_bar_chart(data_transcriptomics, "Transcriptomics")
bar_genomics <- create_horizontal_bar_chart(data_genomics, "Genomics")
bar_single_cell_rna <- create_horizontal_bar_chart(data_single_cell_rna, "Single-cell RNA")
# Combine the plots into a horizontal layout (single row)
infographic_horizontal_bars <- bar_epigenomics + bar_transcriptomics + bar_genomics + bar_single_cell_rna +
plot_layout(ncol = 4, byrow = TRUE)  # 4 columns in a single row
library(plotly)
library(viridisLite)
# Define the vertices of a cube
cube_vertices <- data.frame(
x = c(0, 1, 1, 0, 0, 1, 1, 0),
y = c(0, 0, 1, 1, 0, 0, 1, 1),
z = c(0, 0, 0, 0, 1, 1, 1, 1),
label = c("Epigenomics", "Transcriptomics", "Genomics", "scRNAseq",
"Downstream Analysis", "Others", "Epigenomics", "Transcriptomics")
)
# Define the edges of the cube by connecting the vertices
cube_edges <- data.frame(
x = c(0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0),
y = c(0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1),
z = c(0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1)
)
# Define the labels for each of the 6 faces
face_labels <- data.frame(
x = c(0.5, 0.5, 0.5, 0.5, 1, 0),
y = c(0.5, 0.5, 0, 1, 0.5, 0.5),
z = c(0, 1, 0.5, 0.5, 0.5, 0.5),
label = c("Epigenomics", "Transcriptomics", "Genomics", "scRNAseq",
"Downstream Analysis", "Others")
)
# Define the face labels
face_labels <- data.frame(
x = c(0.5, 0.5, 0.5, 0.5, 1, 0),
y = c(0.5, 0.5, 0, 1, 0.5, 0.5),
z = c(0, 1, 0.5, 0.5, 0.5, 0.5),
label = c("Epigenomics", "Transcriptomics", "Genomics", "scRNAseq",
"Downstream Analysis", "Others")
)
# Use viridis color scale to assign colors to each label
face_labels$color <- viridis(6)
# Create the 3D plot using plotly
plot_ly() %>%
# Add cube vertices
add_markers(data = cube_vertices, x = ~x, y = ~y, z = ~z, text = ~label,
marker = list(size = 8, color = 'blue'),
hoverinfo = 'text') %>%
# Add cube edges
add_lines(data = cube_edges, x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 2)) %>%
# Add face labels
add_text(data = face_labels, x = ~x, y = ~y, z = ~z, text = ~label,
textposition = 'middle center',
textfont = list(size = 16, color = 'red')) %>%
# Customize the layout
layout(
scene = list(
xaxis = list(title = 'X-axis'),
yaxis = list(title = 'Y-axis'),
zaxis = list(title = 'Z-axis'),
aspectmode = 'cube'  # Ensure equal scaling on all axes
),
title = "3D Interactive Cube for Data Analysis"
)
# Create the 3D plot using plotly
plot_ly() %>%
# Add cube vertices
add_markers(data = cube_vertices, x = ~x, y = ~y, z = ~z, text = ~label,
marker = list(size = 8, color = 'blue'),
hoverinfo = 'text') %>%
# Add cube edges
add_lines(data = cube_edges, x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 2)) %>%
# Add colored background markers for the labels
add_markers(data = face_labels, x = ~x, y = ~y, z = ~z,
marker = list(size = 40, color = ~color, opacity = 0.5),
hoverinfo = 'none') %>%
# Add the text labels for each face
add_text(data = face_labels, x = ~x, y = ~y, z = ~z, text = ~label,
textposition = 'middle center',
textfont = list(size = 16, color = 'black')) %>%
# Customize the layout
layout(
scene = list(
xaxis = list(title = 'X-axis'),
yaxis = list(title = 'Y-axis'),
zaxis = list(title = 'Z-axis'),
aspectmode = 'cube'  # Ensure equal scaling on all axes
),
title = "3D Interactive Cube with Viridis Colored Labels"
)
# Define the colors for each face using viridis
face_colors <- viridis(6)
# Define the coordinates for each face of the cube
face_data <- list(
epigenomics = data.frame(x = c(0, 1, 1, 0), y = c(0, 0, 1, 1), z = 0),
transcriptomics = data.frame(x = c(0, 1, 1, 0), y = c(0, 0, 1, 1), z = 1),
genomics = data.frame(x = c(0, 1, 1, 0), y = 0, z = c(0, 0, 1, 1)),
scRNAseq = data.frame(x = c(0, 1, 1, 0), y = 1, z = c(0, 0, 1, 1)),
downstream = data.frame(x = 0, y = c(0, 0, 1, 1), z = c(0, 1, 1, 0)),
others = data.frame(x = 1, y = c(0, 0, 1, 1), z = c(0, 1, 1, 0))
)
# Labels for each face
face_labels <- c("Epigenomics", "Transcriptomics", "Genomics", "scRNAseq", "Downstream Analysis", "Others")
# Function to plot a cube face
plot_face <- function(face_df, face_color, face_label) {
plot_ly(
type = 'scatter3d',
mode = 'lines',
x = face_df$x, y = face_df$y, z = face_df$z,
line = list(width = 10, color = face_color),
hoverinfo = 'text',
text = face_label,  # Hover text is set here
showlegend = FALSE
)
}
# Create each face plot individually
epigenomics_face <- plot_face(face_data$epigenomics, face_colors[1], "Epigenomics")
transcriptomics_face <- plot_face(face_data$transcriptomics, face_colors[2], "Transcriptomics")
genomics_face <- plot_face(face_data$genomics, face_colors[3], "Genomics")
scRNAseq_face <- plot_face(face_data$scRNAseq, face_colors[4], "scRNAseq")
downstream_face <- plot_face(face_data$downstream, face_colors[5], "Downstream Analysis")
others_face <- plot_face(face_data$others, face_colors[6], "Others")
# Combine all faces into a single plot
cube_plot <- epigenomics_face %>%
add_trace(transcriptomics_face) %>%
add_trace(genomics_face) %>%
add_trace(scRNAseq_face) %>%
add_trace(downstream_face) %>%
add_trace(others_face) %>%
layout(
scene = list(
xaxis = list(title = "X-axis"),
yaxis = list(title = "Y-axis"),
zaxis = list(title = "Z-axis")
),
title = "Rubik's Cube for Data Analysis"
)
cube_plot
# Install necessary packages
install.packages("ggplot2")
install.packages("gganimate")
install.packages("dplyr")
# Load the libraries
library(ggplot2)
library(gganimate)
library(dplyr)
# Create a mock dataset representing the 6 omics layers over time
layers <- c("Epigenomics", "Transcriptomics", "Genomics", "scRNAseq", "Functional Genomics", "Other")
time <- seq(1, 10, length.out = 10)
set.seed(123)
data <- expand.grid(Time = time, Layer = layers)
data$Value <- runif(nrow(data), min = 0, max = 1)
# View the data
head(data)
# Create a base plot with ggplot2
p <- ggplot(data, aes(x = Time, y = Value, color = Layer)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = 'Multi-Omics Integration Over Time',
x = 'Time', y = 'Variance Explained') +
theme_minimal() +
theme(legend.position = "right")
# Add animation with gganimate
animated_plot <- p +
transition_reveal(Time) +
labs(title = "Multi-Omics Integration: Time {frame_along}", subtitle = 'Variance Explained')
# Animate the plot
animate(animated_plot, nframes = 100, fps = 10)
# Save the animation as GIF
anim_save("multi_omics_animation.gif", animation = last_animation())
p
shiny::runApp('Documents/JDCo/multiOmics')
install.packages("WGCNA")
runApp('Documents/JDCo/multiOmics')
install.packages("pheatmap")
setwd("~/Documents/JDCo/multiOmics")
runApp()
BiocManager::install("ComplexHeatmap")
runApp()
# Example data generation for WGCNA data
# Load required packages
library(MASS) # For multivariate normal simulation
# Set parameters
set.seed(123)  # For reproducibility
nGenes <- 1000 # Number of genes
nSamples <- 50 # Number of samples
# Simulate RNA-seq data
simulateRNAseq <- function(nGenes, nSamples, nClusters = 5) {
clusterSize <- nGenes / nClusters
exprData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nClusters) {
startIdx <- (i - 1) * clusterSize + 1
endIdx <- i * clusterSize
# Simulate correlated expression within clusters
clusterMean <- runif(nSamples, min = 5, max = 15)
clusterData <- mvrnorm(n = clusterSize, mu = clusterMean, Sigma = diag(0.5, nSamples))
exprData[startIdx:endIdx, ] <- clusterData
}
rownames(exprData) <- paste0("Gene", 1:nGenes)
colnames(exprData) <- paste0("Sample", 1:nSamples)
exprData <- abs(exprData)  # Ensure non-negative values (RNA-seq-like)
return(exprData)
}
# Simulate DNA methylation data
simulateMethylation <- function(exprData, correlationRate = 0.2) {
nGenes <- nrow(exprData)
nSamples <- ncol(exprData)
methData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nGenes) {
# Some genes are correlated with RNA expression
if (runif(1) < correlationRate) {
methData[i, ] <- scale(exprData[i, ]) / 10 + rnorm(nSamples, mean = 0.5, sd = 0.1)
} else {
# Random methylation patterns
methData[i, ] <- rnorm(nSamples, mean = 0.5, sd = 0.1)
}
rownames(methData) <- rownames(exprData)
colnames(methData) <- colnames(exprData)
# Bound methylation values between 0 and 1
methData <- pmax(pmin(methData, 1), 0)
return(methData)
}
# Generate datasets
exprData <- simulateRNAseq(nGenes, nSamples)
methData <- simulateMethylation(exprData)
# Save to CSV files
write.csv(exprData, file = "RNAseq_large_test.csv", row.names = TRUE)
write.csv(methData, file = "Methylation_large_test.csv", row.names = TRUE)
# Output summary
cat("Generated RNA-seq data with", nGenes, "genes and", nSamples, "samples.\n")
cat("Generated DNA methylation data with", nGenes, "genes and", nSamples, "samples.\n")
runApp()
# Example data generation for WGCNA data
# Load required packages
library(MASS) # For multivariate normal simulation
# Set parameters
set.seed(123)  # For reproducibility
nGenes <- 100 # Number of genes
nSamples <- 10 # Number of samples
# Simulate RNA-seq data
simulateRNAseq <- function(nGenes, nSamples, nClusters = 5) {
clusterSize <- nGenes / nClusters
exprData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nClusters) {
startIdx <- (i - 1) * clusterSize + 1
endIdx <- i * clusterSize
# Simulate correlated expression within clusters
clusterMean <- runif(nSamples, min = 5, max = 15)
clusterData <- mvrnorm(n = clusterSize, mu = clusterMean, Sigma = diag(0.5, nSamples))
exprData[startIdx:endIdx, ] <- clusterData
}
rownames(exprData) <- paste0("Gene", 1:nGenes)
colnames(exprData) <- paste0("Sample", 1:nSamples)
exprData <- abs(exprData)  # Ensure non-negative values (RNA-seq-like)
return(exprData)
}
# Simulate DNA methylation data
simulateMethylation <- function(exprData, correlationRate = 0.2) {
nGenes <- nrow(exprData)
nSamples <- ncol(exprData)
methData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nGenes) {
# Some genes are correlated with RNA expression
if (runif(1) < correlationRate) {
methData[i, ] <- scale(exprData[i, ]) / 10 + rnorm(nSamples, mean = 0.5, sd = 0.1)
} else {
# Random methylation patterns
methData[i, ] <- rnorm(nSamples, mean = 0.5, sd = 0.1)
}
rownames(methData) <- rownames(exprData)
colnames(methData) <- colnames(exprData)
# Bound methylation values between 0 and 1
methData <- pmax(pmin(methData, 1), 0)
return(methData)
}
# Generate datasets
exprData <- simulateRNAseq(nGenes, nSamples)
methData <- simulateMethylation(exprData)
# Save to CSV files
write.csv(exprData, file = "RNAseq_large_test.csv", row.names = TRUE)
write.csv(methData, file = "Methylation_large_test.csv", row.names = TRUE)
# Output summary
cat("Generated RNA-seq data with", nGenes, "genes and", nSamples, "samples.\n")
cat("Generated DNA methylation data with", nGenes, "genes and", nSamples, "samples.\n")
runApp()
# Example data generation for WGCNA data
# Load required packages
library(MASS) # For multivariate normal simulation
# Set parameters
set.seed(123)  # For reproducibility
nGenes <- 1000 # Number of genes
nSamples <- 10 # Number of samples
# Simulate RNA-seq data
simulateRNAseq <- function(nGenes, nSamples, nClusters = 5) {
clusterSize <- nGenes / nClusters
exprData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nClusters) {
startIdx <- (i - 1) * clusterSize + 1
endIdx <- i * clusterSize
# Simulate correlated expression within clusters
clusterMean <- runif(nSamples, min = 5, max = 15)
clusterData <- mvrnorm(n = clusterSize, mu = clusterMean, Sigma = diag(0.5, nSamples))
exprData[startIdx:endIdx, ] <- clusterData
}
rownames(exprData) <- paste0("Gene", 1:nGenes)
colnames(exprData) <- paste0("Sample", 1:nSamples)
exprData <- abs(exprData)  # Ensure non-negative values (RNA-seq-like)
return(exprData)
}
# Simulate DNA methylation data
simulateMethylation <- function(exprData, correlationRate = 0.2) {
nGenes <- nrow(exprData)
nSamples <- ncol(exprData)
methData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nGenes) {
# Some genes are correlated with RNA expression
if (runif(1) < correlationRate) {
methData[i, ] <- scale(exprData[i, ]) / 10 + rnorm(nSamples, mean = 0.5, sd = 0.1)
} else {
# Random methylation patterns
methData[i, ] <- rnorm(nSamples, mean = 0.5, sd = 0.1)
}
rownames(methData) <- rownames(exprData)
colnames(methData) <- colnames(exprData)
# Bound methylation values between 0 and 1
methData <- pmax(pmin(methData, 1), 0)
return(methData)
}
# Generate datasets
exprData <- simulateRNAseq(nGenes, nSamples)
methData <- simulateMethylation(exprData)
# Save to CSV files
write.csv(exprData, file = "RNAseq_large_test.csv", row.names = TRUE)
write.csv(methData, file = "Methylation_large_test.csv", row.names = TRUE)
# Output summary
cat("Generated RNA-seq data with", nGenes, "genes and", nSamples, "samples.\n")
cat("Generated DNA methylation data with", nGenes, "genes and", nSamples, "samples.\n")
runApp()
# Example data generation for WGCNA data
# Load required packages
library(MASS) # For multivariate normal simulation
# Set parameters
set.seed(123)  # For reproducibility
nGenes <- 1000 # Number of genes
nSamples <- 100 # Number of samples
# Simulate RNA-seq data
simulateRNAseq <- function(nGenes, nSamples, nClusters = 5) {
clusterSize <- nGenes / nClusters
exprData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nClusters) {
startIdx <- (i - 1) * clusterSize + 1
endIdx <- i * clusterSize
# Simulate correlated expression within clusters
clusterMean <- runif(nSamples, min = 5, max = 15)
clusterData <- mvrnorm(n = clusterSize, mu = clusterMean, Sigma = diag(0.5, nSamples))
exprData[startIdx:endIdx, ] <- clusterData
}
rownames(exprData) <- paste0("Gene", 1:nGenes)
colnames(exprData) <- paste0("Sample", 1:nSamples)
exprData <- abs(exprData)  # Ensure non-negative values (RNA-seq-like)
return(exprData)
}
# Simulate DNA methylation data
simulateMethylation <- function(exprData, correlationRate = 0.2) {
nGenes <- nrow(exprData)
nSamples <- ncol(exprData)
methData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nGenes) {
# Some genes are correlated with RNA expression
if (runif(1) < correlationRate) {
methData[i, ] <- scale(exprData[i, ]) / 10 + rnorm(nSamples, mean = 0.5, sd = 0.1)
} else {
# Random methylation patterns
methData[i, ] <- rnorm(nSamples, mean = 0.5, sd = 0.1)
}
rownames(methData) <- rownames(exprData)
colnames(methData) <- colnames(exprData)
# Bound methylation values between 0 and 1
methData <- pmax(pmin(methData, 1), 0)
return(methData)
}
# Generate datasets
exprData <- simulateRNAseq(nGenes, nSamples)
methData <- simulateMethylation(exprData)
# Save to CSV files
write.csv(exprData, file = "RNAseq_large_test.csv", row.names = TRUE)
write.csv(methData, file = "Methylation_large_test.csv", row.names = TRUE)
# Output summary
cat("Generated RNA-seq data with", nGenes, "genes and", nSamples, "samples.\n")
cat("Generated DNA methylation data with", nGenes, "genes and", nSamples, "samples.\n")
runApp()
# Simulate correlated expression within clusters
clusterMean <- runif(nSamples, min = 5, max = 15)
# Example data generation for WGCNA data
# Load required packages
library(MASS) # For multivariate normal simulation
# Set parameters
set.seed(123)  # For reproducibility
nGenes <- 10000 # Number of genes
nSamples <- 100 # Number of samples
# Simulate RNA-seq data
simulateRNAseq <- function(nGenes, nSamples, nClusters = 5) {
clusterSize <- nGenes / nClusters
exprData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nClusters) {
startIdx <- (i - 1) * clusterSize + 1
endIdx <- i * clusterSize
# Simulate correlated expression within clusters
clusterMean <- runif(nSamples, min = 5, max = 15)
clusterData <- mvrnorm(n = clusterSize, mu = clusterMean, Sigma = diag(0.5, nSamples))
exprData[startIdx:endIdx, ] <- clusterData
}
rownames(exprData) <- paste0("Gene", 1:nGenes)
colnames(exprData) <- paste0("Sample", 1:nSamples)
exprData <- abs(exprData)  # Ensure non-negative values (RNA-seq-like)
return(exprData)
}
# Simulate DNA methylation data
simulateMethylation <- function(exprData, correlationRate = 0.2) {
nGenes <- nrow(exprData)
nSamples <- ncol(exprData)
methData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nGenes) {
# Some genes are correlated with RNA expression
if (runif(1) < correlationRate) {
methData[i, ] <- scale(exprData[i, ]) / 10 + rnorm(nSamples, mean = 0.5, sd = 0.1)
} else {
# Random methylation patterns
methData[i, ] <- rnorm(nSamples, mean = 0.5, sd = 0.1)
}
rownames(methData) <- rownames(exprData)
colnames(methData) <- colnames(exprData)
# Bound methylation values between 0 and 1
methData <- pmax(pmin(methData, 1), 0)
return(methData)
}
# Generate datasets
exprData <- simulateRNAseq(nGenes, nSamples)
methData <- simulateMethylation(exprData)
# Save to CSV files
write.csv(exprData, file = "RNAseq_large_test.csv", row.names = TRUE)
write.csv(methData, file = "Methylation_large_test.csv", row.names = TRUE)
# Output summary
cat("Generated RNA-seq data with", nGenes, "genes and", nSamples, "samples.\n")
cat("Generated DNA methylation data with", nGenes, "genes and", nSamples, "samples.\n")
runApp()
# Example data generation for WGCNA data
# Load required packages
library(MASS) # For multivariate normal simulation
# Set parameters
set.seed(123)  # For reproducibility
nGenes <- 5000 # Number of genes
nSamples <- 100 # Number of samples
# Simulate RNA-seq data
simulateRNAseq <- function(nGenes, nSamples, nClusters = 5) {
clusterSize <- nGenes / nClusters
exprData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nClusters) {
startIdx <- (i - 1) * clusterSize + 1
endIdx <- i * clusterSize
# Simulate correlated expression within clusters
clusterMean <- runif(nSamples, min = 5, max = 15)
clusterData <- mvrnorm(n = clusterSize, mu = clusterMean, Sigma = diag(0.5, nSamples))
exprData[startIdx:endIdx, ] <- clusterData
}
rownames(exprData) <- paste0("Gene", 1:nGenes)
colnames(exprData) <- paste0("Sample", 1:nSamples)
exprData <- abs(exprData)  # Ensure non-negative values (RNA-seq-like)
return(exprData)
}
# Simulate DNA methylation data
simulateMethylation <- function(exprData, correlationRate = 0.2) {
nGenes <- nrow(exprData)
nSamples <- ncol(exprData)
methData <- matrix(0, nrow = nGenes, ncol = nSamples)
for (i in 1:nGenes) {
# Some genes are correlated with RNA expression
if (runif(1) < correlationRate) {
methData[i, ] <- scale(exprData[i, ]) / 10 + rnorm(nSamples, mean = 0.5, sd = 0.1)
} else {
# Random methylation patterns
methData[i, ] <- rnorm(nSamples, mean = 0.5, sd = 0.1)
}
rownames(methData) <- rownames(exprData)
colnames(methData) <- colnames(exprData)
# Bound methylation values between 0 and 1
methData <- pmax(pmin(methData, 1), 0)
return(methData)
}
# Generate datasets
exprData <- simulateRNAseq(nGenes, nSamples)
methData <- simulateMethylation(exprData)
# Save to CSV files
write.csv(exprData, file = "RNAseq_large_test.csv", row.names = TRUE)
write.csv(methData, file = "Methylation_large_test.csv", row.names = TRUE)
# Output summary
cat("Generated RNA-seq data with", nGenes, "genes and", nSamples, "samples.\n")
cat("Generated DNA methylation data with", nGenes, "genes and", nSamples, "samples.\n")
runApp()
q("no")
